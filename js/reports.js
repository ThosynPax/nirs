// Reports functionality
document.addEventListener('DOMContentLoaded', function() {
    const user = AuthManager.requireAuth();
    initializeReports(user);
});

function initializeReports(user) {
    document.getElementById('userName').textContent = user.name;
    loadKPIMetrics();
    loadComplianceStatus();
    loadRecentReports();
    setupNavigation();
}

function generateReport() {
    const reportType = document.getElementById('reportType').value;
    const dateRange = document.getElementById('dateRange').value;
    const format = document.getElementById('reportFormat').value;
    const institution = document.getElementById('institutionFilter').value;
    
    const progressContainer = document.getElementById('progressContainer');
    progressContainer.classList.remove('hidden');

    // Simulate report generation
    setTimeout(() => {
        const reportData = generateReportData(reportType, dateRange, institution);
        downloadReport(reportData, reportType, format);
        
        progressContainer.classList.add('hidden');
        Utils.showNotification(`Report generated successfully!`, 'success');
        
        // Add to recent reports
        addToRecentReports(reportType, format);
        
    }, 2000);
}

function generateReportData(type, range, institution) {
    const data = DataStore.getData();
    const kpis = generateKPIs();
    
    const baseReport = {
        title: `${type.charAt(0).toUpperCase() + type.slice(1)} Report`,
        generatedAt: new Date().toISOString(),
        dateRange: range,
        institution: institution,
        summary: `Automated regulatory report generated by NIRS Platform`
    };

    switch (type) {
        case 'comprehensive':
            return {
                ...baseReport,
                kpis: kpis,
                transactionSummary: {
                    total: data.length,
                    highRisk: data.filter(d => d.risk_score > 0.7).length,
                    totalAmount: data.reduce((sum, d) => sum + d.amount, 0),
                    averageRisk: (data.reduce((sum, d) => sum + d.risk_score, 0) / data.length).toFixed(2)
                },
                recommendations: [
                    "Increase monitoring for high-value transactions",
                    "Review compliance procedures for Bank B",
                    "Implement additional checks for new accounts"
                ]
            };

        case 'risk':
            return {
                ...baseReport,
                riskDistribution: {
                    low: data.filter(d => d.risk_score <= 0.3).length,
                    medium: data.filter(d => d.risk_score > 0.3 && d.risk_score <= 0.7).length,
                    high: data.filter(d => d.risk_score > 0.7).length
                },
                topRisks: data
                    .filter(d => d.risk_score > 0.7)
                    .slice(0, 10)
                    .map(d => ({
                        transaction_id: d.transaction_id,
                        amount: d.amount,
                        risk_score: d.risk_score,
                        institution: d.institution
                    })),
                riskTrend: "Increasing"
            };

        case 'compliance':
            return {
                ...baseReport,
                complianceRate: kpis.compliance_reduction,
                violations: data.filter(d => d.risk_score > 0.8).length,
                institutions: [...new Set(data.map(d => d.institution))].map(inst => ({
                    name: inst,
                    compliance: Math.random() * 20 + 80, // Mock data
                    issues: Math.floor(Math.random() * 5)
                }))
            };

        default:
            return baseReport;
    }
}

function downloadReport(data, type, format) {
    let content, mimeType, extension;

    switch (format) {
        case 'json':
            content = JSON.stringify(data, null, 2);
            mimeType = 'application/json';
            extension = 'json';
            break;
        case 'csv':
            content = convertToCSV(data);
            mimeType = 'text/csv';
            extension = 'csv';
            break;
        case 'excel':
            // Simplified - in real app would use a library
            content = convertToCSV(data);
            mimeType = 'application/vnd.ms-excel';
            extension = 'xlsx';
            break;
        default: // pdf
            content = convertToText(data);
            mimeType = 'text/plain';
            extension = 'txt';
    }

    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `nirs_${type}_report_${new Date().getTime()}.${extension}`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}

function convertToCSV(data) {
    if (data.transactionSummary) {
        return `Metric,Value
Total Transactions,${data.transactionSummary.total}
High Risk Transactions,${data.transactionSummary.highRisk}
Total Amount,${data.transactionSummary.totalAmount}
Average Risk Score,${data.transactionSummary.averageRisk}`;
    }
    return Object.keys(data).map(key => `${key},${data[key]}`).join('\n');
}

function convertToText(data) {
    let text = `NIRS REGULATORY REPORT\n`;
    text += `=====================\n\n`;
    text += `Title: ${data.title}\n`;
    text += `Generated: ${new Date(data.generatedAt).toLocaleString()}\n`;
    text += `Date Range: ${data.dateRange}\n\n`;

    if (data.kpis) {
        text += `KEY PERFORMANCE INDICATORS\n`;
        text += `-------------------------\n`;
        Object.entries(data.kpis).forEach(([key, value]) => {
            text += `${key}: ${value}\n`;
        });
        text += `\n`;
    }

    if (data.transactionSummary) {
        text += `TRANSACTION SUMMARY\n`;
        text += `------------------\n`;
        text += `Total Transactions: ${data.transactionSummary.total}\n`;
        text += `High Risk: ${data.transactionSummary.highRisk}\n`;
        text += `Total Amount: â‚¦${data.transactionSummary.totalAmount.toLocaleString()}\n`;
        text += `Average Risk: ${data.transactionSummary.averageRisk}\n\n`;
    }

    return text;
}

function generateKPIs() {
    const data = DataStore.getData();
    const highRiskCount = data.filter(d => d.risk_score > 0.7).length;
    
    return {
        connected_institutions: Math.min(95, Math.floor(Math.random() * 10) + 90),
        anomaly_detection_speed: (Math.random() * 0.5 + 0.3).toFixed(2),
        compliance_reduction: Math.floor(Math.random() * 20) + 35,
        anomalies_detected: highRiskCount,
        open_source_components: 8,
        sandbox_onboarding: (Math.random() * 2 + 2).toFixed(1),
        global_pilots: 4,
        data_quality_score: Math.floor(Math.random() * 20) + 80
    };
}

function loadKPIMetrics() {
    const kpis = generateKPIs();
    const container = document.getElementById('kpiMetrics');

    const kpiData = [
        { label: 'Connected Institutions', value: `${kpis.connected_institutions}%`, trend: '+2%' },
        { label: 'Detection Speed', value: `${kpis.anomaly_detection_speed}s`, trend: '-0.1s' },
        { label: 'Compliance Improvement', value: `${kpis.compliance_reduction}%`, trend: '+5%' },
        { label: 'Anomalies Detected', value: kpis.anomalies_detected, trend: '+3' },
        { label: 'Data Quality Score', value: `${kpis.data_quality_score}%`, trend: '+2%' },
        { label: 'System Uptime', value: '99.95%', trend: 'Stable' }
    ];

    container.innerHTML = kpiData.map(kpi => `
        <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <div>
                <div class="text-sm font-medium text-gray-900">${kpi.label}</div>
                <div class="text-2xl font-bold text-gray-900">${kpi.value}</div>
            </div>
            <div class="text-right">
                <div class="text-sm font-medium text-green-600">${kpi.trend}</div>
                <div class="text-xs text-gray-500">vs last month</div>
            </div>
        </div>
    `).join('');
}

function loadComplianceStatus() {
    const data = DataStore.getData();
    const institutions = [...new Set(data.map(d => d.institution))];
    
    const complianceData = institutions.map(inst => {
        const instData = data.filter(d => d.institution === inst);
        const complianceRate = Math.floor((instData.filter(d => d.risk_score <= 0.5).length / instData.length) * 100);
        
        return {
            name: inst,
            compliance: complianceRate,
            transactions: instData.length,
            highRisk: instData.filter(d => d.risk_score > 0.7).length
        };
    });

    const container = document.getElementById('complianceStatus');
    container.innerHTML = complianceData.map(inst => `
        <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <div class="flex-1">
                <div class="flex items-center justify-between mb-2">
                    <div class="font-medium text-gray-900">${inst.name}</div>
                    <div class="text-sm font-semibold ${
                        inst.compliance >= 90 ? 'text-green-600' : 
                        inst.compliance >= 80 ? 'text-yellow-600' : 'text-red-600'
                    }">
                        ${inst.compliance}%
                    </div>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2">
                    <div class="h-2 rounded-full ${
                        inst.compliance >= 90 ? 'bg-green-500' : 
                        inst.compliance >= 80 ? 'bg-yellow-500' : 'bg-red-500'
                    }" style="width: ${inst.compliance}%"></div>
                </div>
                <div class="flex justify-between text-xs text-gray-600 mt-1">
                    <span>${inst.transactions} tx</span>
                    <span>${inst.highRisk} high risk</span>
                </div>
            </div>
        </div>
    `).join('');
}

function loadRecentReports() {
    const reports = [
        {
            id: 1,
            type: 'Comprehensive',
            date: '2024-01-15',
            size: '2.4 MB',
            status: 'completed'
        },
        {
            id: 2,
            type: 'Risk Assessment',
            date: '2024-01-14',
            size: '1.8 MB',
            status: 'completed'
        },
        {
            id: 3,
            type: 'Compliance Summary',
            date: '2024-01-12',
            size: '1.2 MB',
            status: 'completed'
        },
        {
            id: 4,
            type: 'Performance Metrics',
            date: '2024-01-10',
            size: '0.9 MB',
            status: 'completed'
        }
    ];

    const container = document.getElementById('recentReports');
    container.innerHTML = reports.map(report => `
        <div class="flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
            <div class="flex items-center space-x-4">
                <div class="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                    <span class="text-blue-600">ðŸ“„</span>
                </div>
                <div>
                    <div class="font-medium text-gray-900">${report.type} Report</div>
                    <div class="text-sm text-gray-600">Generated on ${new Date(report.date).toLocaleDateString()}</div>
                </div>
            </div>
            <div class="flex items-center space-x-4">
                <span class="text-sm text-gray-600">${report.size}</span>
                <span class="px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">${report.status}</span>
                <button onclick="downloadReportById(${report.id})" class="text-blue-600 hover:text-blue-800 text-sm font-medium">
                    Download
                </button>
            </div>
        </div>
    `).join('');
}

function addToRecentReports(type, format) {
    // In a real app, this would update the backend
    Utils.showNotification(`Report added to recent reports`, 'success');
}

function scheduleReport() {
    Utils.showNotification('Report scheduling feature coming soon!', 'info');
}

function exportData() {
    const data = DataStore.getData();
    const csvContent = convertDataToCSV(data);
    
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `nirs_export_${new Date().getTime()}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    Utils.showNotification('Data exported successfully!', 'success');
}

function convertDataToCSV(data) {
    const headers = ['Transaction ID', 'Amount', 'Risk Score', 'Institution', 'Timestamp', 'Signature'];
    const rows = data.map(item => [
        item.transaction_id,
        item.amount,
        item.risk_score,
        item.institution,
        item.timestamp,
        item.signature
    ]);

    return [headers, ...rows].map(row => row.join(',')).join('\n');
}

function downloadReportById(id) {
    Utils.showNotification(`Downloading report #${id}...`, 'success');
    // In real app, this would fetch the specific report
}

function setupNavigation() {
    Navigation.setupNavigation();
}